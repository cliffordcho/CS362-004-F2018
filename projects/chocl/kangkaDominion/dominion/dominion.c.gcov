        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30801162 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
 30801162:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
 30801162:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
 11000415:   12:    return -1;
 19800747:   13:  return 0;
 30801162:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:
        -:   22:
        -:   23:
        -:   24:
        -:   25:
        -:   26:
function concilRoomC called 5 returned 100% blocks executed 100%
        -:   27:void  concilRoomC(struct gameState ** state, int *currentPlayer,int *handPos)
        -:   28:    { 
        -:   29:      int i;
       50:   30:    for ( i = 0; i < 4; i++) //+4 Cards
branch  0 taken 80%
branch  1 taken 20%
        -:   31:  {
       20:   32:    drawCard(*currentPlayer, *state);
       20:   33:  }
        -:   34:      
        -:   35:      //+1 Buy
        5:   36:      (*state)->numBuys++;
        -:   37:      
        -:   38:      //Each other player draws a card
       36:   39:      for (i = 0; i < (*state)->numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28%
        -:   40:  {
       13:   41:    if ( i != *currentPlayer )
branch  0 taken 62%
branch  1 taken 38%
        -:   42:      {
        8:   43:        drawCard(i, *state);
        8:   44:      }
       13:   45:  }
        -:   46:      
        -:   47:      //put played card in played card pile
        5:   48:      discardCard(*handPos, *currentPlayer, *state, 0);
        5:   49:  }
        -:   50:
        -:   51:
function adventurerC called 6 returned 100% blocks executed 92%
        -:   52:void adventurerC(int * drawntreasure,struct gameState ** state, int * currentPlayer, int * cardDrawn, int temphand[MAX_HAND], int * z)
        -:   53:{//-----------------BUG:This card now will not check if the deck is empty.
       52:   54:while(*drawntreasure<2){
branch  0 taken 77%
branch  1 taken 23%
       20:   55:  drawCard(*currentPlayer, *state);
       20:   56:  *cardDrawn = (*state)->hand[*currentPlayer][(*state)->handCount[*currentPlayer]-1];//top card of hand is most recently drawn card.
       24:   57:  if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
branch  0 taken 10%
branch  1 taken 90%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
       18:   58:    *drawntreasure++;
        -:   59:  else{
        2:   60:    temphand[*z]=*cardDrawn;
        2:   61:    (*state)->handCount[*currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2:   62:    *z++;
        -:   63:  }
        -:   64:      }
       12:   65:      while(*z-1>=0){
branch  0 taken 0%
branch  1 taken 100%
    #####:   66:  (*state)->discard[*currentPlayer][(*state)->discardCount[*currentPlayer]++]=temphand[*z-1]; // discard all cards in play that have been drawn
    #####:   67:  *z=*z-1;
        -:   68:  }
        6:   69:}
        -:   70:
function smithyC called 8 returned 100% blocks executed 100%
        -:   71:void smithyC(struct gameState ** state, int * currentPlayer, int *handPos)
        -:   72:{
        -:   73:int i;
        -:   74://+3cards
      256:   75:for (i = 0; i < 15; i++)//----------------------------BUG:now the player has to draw 15 cards instead of 3
branch  0 taken 94%
branch  1 taken 6%
        -:   76:  {
      120:   77:    drawCard(*currentPlayer, *state);
      120:   78:  }
        -:   79:      
        -:   80:      //discard card from hand
        8:   81:      discardCard(*handPos, *currentPlayer, *state, 0);
        8:   82:}
        -:   83:
        -:   84:
function outpostC called 0 returned 0% blocks executed 0%
        -:   85:void outpostC(struct gameState ** state, int * handPos, int * currentPlayer)
        -:   86:{
        -:   87:      //set outpost flag
    #####:   88:      (*state)->outpostPlayed--;//--------------------BUG:now the counter is decremented instead of incremented
        -:   89:      
        -:   90:      //discard card
    #####:   91:      discardCard(*handPos, *currentPlayer, *state, 0);
    #####:   92:}
        -:   93:
function seaHagC called 0 returned 0% blocks executed 0%
        -:   94:void seaHagC(struct gameState ** state, int * currentPlayer)
        -:   95:{
        -:   96:  int i;
    #####:   97:for (i = 0; i < (*state)->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:   98:  if (i != *currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:   99:    (*state)->discard[i][(*state)->discardCount[i]] = (*state)->deck[i][(*state)->deckCount[i]--];
    #####:  100:    for(int j=0;j<10;j++)          //----------------BUG:now top 10 cards will be replaced instead of top 1 card
branch  0 never executed
branch  1 never executed
        -:  101:    {
    #####:  102:      (*state)->deckCount[i]--;
    #####:  103:    (*state)->discardCount[i]++;
    #####:  104:    (*state)->deck[i][(*state)->deckCount[i]--] = curse;//Top card now a curse
    #####:  105:    }
    #####:  106:  }
    #####:  107:      }
    #####:  108:}
        -:  109:
        -:  110:
        -:  111:
        -:  112:
        -:  113:
        -:  114:
        -:  115:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:  116:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  117:		  int k8, int k9, int k10) {
    #####:  118:  int* k = malloc(10 * sizeof(int));
    #####:  119:  k[0] = k1;
    #####:  120:  k[1] = k2;
    #####:  121:  k[2] = k3;
    #####:  122:  k[3] = k4;
    #####:  123:  k[4] = k5;
    #####:  124:  k[5] = k6;
    #####:  125:  k[6] = k7;
    #####:  126:  k[7] = k8;
    #####:  127:  k[8] = k9;
    #####:  128:  k[9] = k10;
    #####:  129:  return k;
        -:  130:}
        -:  131:
function initializeGame called 1100037 returned 100% blocks executed 95%
        -:  132:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  133:		   struct gameState *state) {
        -:  134:
        -:  135:  int i;
        -:  136:  int j;
        -:  137:  int it;			
        -:  138:  //set up random number generator
  1100037:  139:  SelectStream(1);
  1100037:  140:  PutSeed((long)randomSeed);
        -:  141:  
        -:  142:  //check number of players
  2200074:  143:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  144:    {
    #####:  145:      return -1;
        -:  146:    }
        -:  147:
        -:  148:  //set number of players
  1100037:  149:  state->numPlayers = numPlayers;
        -:  150:
        -:  151:  //check selected kingdom cards are different
 24200814:  152:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:  153:    {
242008140:  154:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:  155:        {
209007030:  156:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:  157:	    {
    #####:  158:	      return -1;
        -:  159:	    }
110003700:  160:        }
 11000370:  161:    }
        -:  162:
        -:  163:
        -:  164:  //initialize supply
        -:  165:  ///////////////////////////////
        -:  166:
        -:  167:  //set number of Curse cards
  1100037:  168:  if (numPlayers == 2)
branch  0 taken 99%
branch  1 taken 1%
        -:  169:    {
  1100031:  170:      state->supplyCount[curse] = 10;
  1100031:  171:    }
        6:  172:  else if (numPlayers == 3)
branch  0 taken 50%
branch  1 taken 50%
        -:  173:    {
        3:  174:      state->supplyCount[curse] = 20;
        3:  175:    }
        -:  176:  else
        -:  177:    {
        3:  178:      state->supplyCount[curse] = 30;
        -:  179:    }
        -:  180:
        -:  181:  //set number of Victory cards
  1100037:  182:  if (numPlayers == 2)
branch  0 taken 99%
branch  1 taken 1%
        -:  183:    {
  1100031:  184:      state->supplyCount[estate] = 8;
  1100031:  185:      state->supplyCount[duchy] = 8;
  1100031:  186:      state->supplyCount[province] = 8;
  1100031:  187:    }
        -:  188:  else
        -:  189:    {
        6:  190:      state->supplyCount[estate] = 12;
        6:  191:      state->supplyCount[duchy] = 12;
        6:  192:      state->supplyCount[province] = 12;
        -:  193:    }
        -:  194:
        -:  195:  //set number of Treasure cards
  1100037:  196:  state->supplyCount[copper] = 60 - (7 * numPlayers);
  1100037:  197:  state->supplyCount[silver] = 40;
  1100037:  198:  state->supplyCount[gold] = 30;
        -:  199:
        -:  200:  //set number of Kingdom cards
 46201554:  201:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  202:    {
363012210:  203:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  204:	{
170505735:  205:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  206:	    {
        -:  207:	      //check if card is a 'Victory' Kingdom card
 20900703:  208:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  209:		{
  2200053:  210:		  if (numPlayers == 2){ 
branch  0 taken 99%
branch  1 taken 1%
  2200043:  211:		    state->supplyCount[i] = 8; 
  2200043:  212:		  }
       10:  213:		  else{ state->supplyCount[i] = 12; }
  2200053:  214:		}
        -:  215:	      else
        -:  216:		{
  8800317:  217:		  state->supplyCount[i] = 10;
        -:  218:		}
 11000370:  219:	      break;
        -:  220:	    }
        -:  221:	  else    //card is not in the set choosen for the game
        -:  222:	    {
159505365:  223:	      state->supplyCount[i] = -1;
        -:  224:	    }
159505365:  225:	}
        -:  226:
 22000740:  227:    }
        -:  228:
        -:  229:  ////////////////////////
        -:  230:  //supply intilization complete
        -:  231:
        -:  232:  //set player decks
  6600240:  233:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  234:    {
  2200083:  235:      state->deckCount[i] = 0;
 17600664:  236:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  237:	{
  6600249:  238:	  state->deck[i][j] = estate;
  6600249:  239:	  state->deckCount[i]++;
  6600249:  240:	}
 35201328:  241:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  242:	{
 15400581:  243:	  state->deck[i][j] = copper;
 15400581:  244:	  state->deckCount[i]++;		
 15400581:  245:	}
  2200083:  246:    }
        -:  247:
        -:  248:  //shuffle player decks
  6600240:  249:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  250:    {
  2200083:  251:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  252:	{
    #####:  253:	  return -1;
        -:  254:	}
  2200083:  255:    }
        -:  256:
        -:  257:  //draw player hands
  6600240:  258:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  259:    {  
        -:  260:      //initialize hand size to zero
  2200083:  261:      state->handCount[i] = 0;
  2200083:  262:      state->discardCount[i] = 0;
        -:  263:      //draw 5 cards
        -:  264:      // for (j = 0; j < 5; j++)
        -:  265:      //	{
        -:  266:      //	  drawCard(i, state);
        -:  267:      //	}
  2200083:  268:    }
        -:  269:  
        -:  270:  //set embargo tokens to 0 for all supply piles
 61602072:  271:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  272:    {
 29700999:  273:      state->embargoTokens[i] = 0;
 29700999:  274:    }
        -:  275:
        -:  276:  //initialize first player's turn
  1100037:  277:  state->outpostPlayed = 0;
  1100037:  278:  state->phase = 0;
  1100037:  279:  state->numActions = 1;
  1100037:  280:  state->numBuys = 1;
  1100037:  281:  state->playedCardCount = 0;
  1100037:  282:  state->whoseTurn = 0;
  1100037:  283:  state->handCount[state->whoseTurn] = 0;
        -:  284:  //int it; move to top
        -:  285:
        -:  286:  //Moved draw cards to here, only drawing at the start of a turn
 13200444:  287:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
  5500185:  288:    drawCard(state->whoseTurn, state);
  5500185:  289:  }
        -:  290:
  1100037:  291:  updateCoins(state->whoseTurn, state, 0);
        -:  292:
  1100037:  293:  return 0;
  1100037:  294:}
        -:  295:
function shuffle called 2200169 returned 100% blocks executed 100%
        -:  296:int shuffle(int player, struct gameState *state) {
        -:  297: 
        -:  298:
        -:  299:  int newDeck[MAX_DECK];
  2200169:  300:  int newDeckPos = 0;
        -:  301:  int card;
        -:  302:  int i;
        -:  303:
  2200169:  304:  if (state->deckCount[player] < 1)
branch  0 taken 1%
branch  1 taken 99%
       86:  305:    return -1;
  2200083:  306:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  307:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  308:
 48401826:  309:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
 22000830:  310:    card = floor(Random() * state->deckCount[player]);
 22000830:  311:    newDeck[newDeckPos] = state->deck[player][card];
 22000830:  312:    newDeckPos++;
143018668:  313:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31%
 49508504:  314:      state->deck[player][i] = state->deck[player][i+1];
 49508504:  315:    }
 22000830:  316:    state->deckCount[player]--;
        -:  317:  }
 48401826:  318:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
 22000830:  319:    state->deck[player][i] = newDeck[i];
 22000830:  320:    state->deckCount[player]++;
 22000830:  321:  }
        -:  322:
  2200083:  323:  return 0;
  2200169:  324:}
        -:  325:
function playCard called 0 returned 0% blocks executed 0%
        -:  326:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  327:{	
        -:  328:  int card;
    #####:  329:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  330:
        -:  331:  //check if it is the right phase
    #####:  332:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      return -1;
        -:  335:    }
        -:  336:	
        -:  337:  //check if player has enough actions
    #####:  338:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      return -1;
        -:  341:    }
        -:  342:	
        -:  343:  //get card played
    #####:  344:  card = handCard(handPos, state);
        -:  345:	
        -:  346:  //check if selected card is an action
    #####:  347:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  348:    {
    #####:  349:      return -1;
        -:  350:    }
        -:  351:	
        -:  352:  //play card
    #####:  353:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  354:    {
    #####:  355:      return -1;
        -:  356:    }
        -:  357:	
        -:  358:  //reduce number of actions
    #####:  359:  state->numActions--;
        -:  360:
        -:  361:  //update coins (Treasure cards may be added with card draws)
    #####:  362:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  363:	
    #####:  364:  return 0;
    #####:  365:}
        -:  366:
function buyCard called 1000007 returned 100% blocks executed 100%
        -:  367:int buyCard(int supplyPos, struct gameState *state) {
        -:  368:  int who;
        -:  369:  if (DEBUG){
        -:  370:    printf("Entering buyCard...\n");
        -:  371:  }
        -:  372:
        -:  373:  // I don't know what to do about the phase thing.
        -:  374:
  1000007:  375:  who = state->whoseTurn;
        -:  376:
  1000007:  377:  if (state->numBuys < 1){
branch  0 taken 80%
branch  1 taken 20%
        -:  378:    if (DEBUG)
        -:  379:      printf("You do not have any buys left\n");
   799701:  380:    return -1;
   200306:  381:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 60%
branch  1 taken 40%
        -:  382:    if (DEBUG)
        -:  383:      printf("There are not any of that type of card left\n");
   120151:  384:    return -1;
    80155:  385:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 84%
branch  1 taken 16%
        -:  386:    if (DEBUG) 
        -:  387:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    67297:  388:    return -1;
        -:  389:  } else {
    12858:  390:    state->phase=1;
        -:  391:    //state->supplyCount[supplyPos]--;
    12858:  392:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  393:  
    12858:  394:    state->coins = (state->coins) - (getCost(supplyPos));
    12858:  395:    state->numBuys--;
        -:  396:    if (DEBUG)
        -:  397:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  398:  }
        -:  399:
        -:  400:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  401:  //state->discardCount[who]++;
        -:  402:    
    12858:  403:  return 0;
  1000007:  404:}
        -:  405:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  406:int numHandCards(struct gameState *state) {
    #####:  407:  return state->handCount[ whoseTurn(state) ];
        -:  408:}
        -:  409:
function handCard called 0 returned 0% blocks executed 0%
        -:  410:int handCard(int handPos, struct gameState *state) {
    #####:  411:  int currentPlayer = whoseTurn(state);
    #####:  412:  return state->hand[currentPlayer][handPos];
        -:  413:}
        -:  414:
function supplyCount called 213173 returned 100% blocks executed 100%
        -:  415:int supplyCount(int card, struct gameState *state) {
   213173:  416:  return state->supplyCount[card];
        -:  417:}
        -:  418:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  419:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  420:  int i;
    #####:  421:  int count = 0;
        -:  422:
    #####:  423:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  424:    {
    #####:  425:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  426:    }
        -:  427:
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  431:    }
        -:  432:
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  436:    }
        -:  437:
    #####:  438:  return count;
        -:  439:}
        -:  440:
function whoseTurn called 133 returned 100% blocks executed 100%
        -:  441:int whoseTurn(struct gameState *state) {
      133:  442:  return state->whoseTurn;
        -:  443:}
        -:  444:
function endTurn called 12 returned 100% blocks executed 100%
        -:  445:int endTurn(struct gameState *state) {
        -:  446:  int k;
        -:  447:  int i;
       12:  448:  int currentPlayer = whoseTurn(state);
        -:  449:  
        -:  450:  //Discard hand
      144:  451:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17%
       60:  452:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       60:  453:    state->hand[currentPlayer][i] = -1;//Set card to -1
       60:  454:  }
       12:  455:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  456:    
        -:  457:  //Code for determining the player
       12:  458:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 75%
branch  1 taken 25%
        9:  459:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        9:  460:  }
        -:  461:  else{
        3:  462:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  463:  }
        -:  464:
       12:  465:  state->outpostPlayed = 0;
       12:  466:  state->phase = 0;
       12:  467:  state->numActions = 1;
       12:  468:  state->coins = 0;
       12:  469:  state->numBuys = 1;
       12:  470:  state->playedCardCount = 0;
       12:  471:  state->handCount[state->whoseTurn] = 0;
        -:  472:
        -:  473:  //int k; move to top
        -:  474:  //Next player draws hand
      144:  475:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       60:  476:    drawCard(state->whoseTurn, state);//Draw a card
       60:  477:  }
        -:  478:
        -:  479:  //Update money
       12:  480:  updateCoins(state->whoseTurn, state , 0);
        -:  481:
       12:  482:  return 0;
        -:  483:}
        -:  484:
function isGameOver called 100005 returned 100% blocks executed 100%
        -:  485:int isGameOver(struct gameState *state) {
        -:  486:  int i;
        -:  487:  int j;
        -:  488:	
        -:  489:  //if stack of Province cards is empty, the game ends
   100005:  490:  if (state->supplyCount[province] == 0)
branch  0 taken 20%
branch  1 taken 80%
        -:  491:    {
    19966:  492:      return 1;
        -:  493:    }
        -:  494:
        -:  495:  //if three supply pile are at 0, the game ends
    80039:  496:  j = 0;
  4162028:  497:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  498:    {
  2000975:  499:      if (state->supplyCount[i] == 0)
branch  0 taken 19%
branch  1 taken 81%
        -:  500:	{
   384290:  501:	  j++;
   384290:  502:	}
  2000975:  503:    }
    80039:  504:  if ( j >= 3)
branch  0 taken 89%
branch  1 taken 11%
        -:  505:    {
    70869:  506:      return 1;
        -:  507:    }
        -:  508:
     9170:  509:  return 0;
   100005:  510:}
        -:  511:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  512:int scoreFor (int player, struct gameState *state) {
        -:  513:
        -:  514:  int i;
    #####:  515:  int score = 0;
        -:  516:  //score from hand
    #####:  517:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  520:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  521:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  522:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  523:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  524:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  525:    }
        -:  526:
        -:  527:  //score from discard
    #####:  528:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  531:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  532:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  533:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  534:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  535:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  536:    }
        -:  537:
        -:  538:  //score from deck
    #####:  539:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  540:    {
    #####:  541:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  542:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  543:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  544:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  545:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  546:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  547:    }
        -:  548:
    #####:  549:  return score;
        -:  550:}
        -:  551:
function getWinners called 0 returned 0% blocks executed 0%
        -:  552:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  553:  int i;	
        -:  554:  int j;
        -:  555:  int highScore;
        -:  556:  int currentPlayer;
        -:  557:
        -:  558:  //get score for each player
    #####:  559:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  560:    {
        -:  561:      //set unused player scores to -9999
    #####:  562:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  563:	{
    #####:  564:	  players[i] = -9999;
    #####:  565:	}
        -:  566:      else
        -:  567:	{
    #####:  568:	  players[i] = scoreFor (i, state);
        -:  569:	}
    #####:  570:    }
        -:  571:
        -:  572:  //find highest score
    #####:  573:  j = 0;
    #####:  574:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  575:    {
    #####:  576:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  577:	{
    #####:  578:	  j = i;
    #####:  579:	}
    #####:  580:    }
    #####:  581:  highScore = players[j];
        -:  582:
        -:  583:  //add 1 to players who had less turns
    #####:  584:  currentPlayer = whoseTurn(state);
    #####:  585:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  586:    {
    #####:  587:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  588:	{
    #####:  589:	  players[i]++;
    #####:  590:	}
    #####:  591:    }
        -:  592:
        -:  593:  //find new highest score
    #####:  594:  j = 0;
    #####:  595:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  596:    {
    #####:  597:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  598:	{
    #####:  599:	  j = i;
    #####:  600:	}
    #####:  601:    }
    #####:  602:  highScore = players[j];
        -:  603:
        -:  604:  //set winners in array to 1 and rest to 0
    #####:  605:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  606:    {
    #####:  607:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  608:	{
    #####:  609:	  players[i] = 1;
    #####:  610:	}
        -:  611:      else
        -:  612:	{
    #####:  613:	  players[i] = 0;
        -:  614:	}
    #####:  615:    }
        -:  616:
    #####:  617:  return 0;
        -:  618:}
        -:  619:
function drawCard called 5500417 returned 100% blocks executed 75%
        -:  620:int drawCard(int player, struct gameState *state)
        -:  621:{	int count;
        -:  622:  int deckCounter;
  5500417:  623:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  624:    
        -:  625:    //Step 1 Shuffle the discard pile back into a deck
        -:  626:    int i;
        -:  627:    //Move discard to deck
      172:  628:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  629:      state->deck[player][i] = state->discard[player][i];
    #####:  630:      state->discard[player][i] = -1;
    #####:  631:    }
        -:  632:
       86:  633:    state->deckCount[player] = state->discardCount[player];
       86:  634:    state->discardCount[player] = 0;//Reset discard
        -:  635:
        -:  636:    //Shufffle the deck
       86:  637:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  638:   
        -:  639:    if (DEBUG){//Debug statements
        -:  640:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  641:    }
        -:  642:    
       86:  643:    state->discardCount[player] = 0;
        -:  644:
        -:  645:    //Step 2 Draw Card
       86:  646:    count = state->handCount[player];//Get current player's hand count
        -:  647:    
        -:  648:    if (DEBUG){//Debug statements
        -:  649:      printf("Current hand count: %d\n", count);
        -:  650:    }
        -:  651:    
       86:  652:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  653:
       86:  654:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
       86:  655:      return -1;
        -:  656:
    #####:  657:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  658:    state->deckCount[player]--;
    #####:  659:    state->handCount[player]++;//Increment hand count
    #####:  660:  }
        -:  661:
        -:  662:  else{
  5500331:  663:    int count = state->handCount[player];//Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG){//Debug statements
        -:  666:      printf("Current hand count: %d\n", count);
        -:  667:    }
        -:  668:
  5500331:  669:    deckCounter = state->deckCount[player];//Create holder for the deck count
  5500331:  670:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  5500331:  671:    state->deckCount[player]--;
  5500331:  672:    state->handCount[player]++;//Increment hand count
        -:  673:  }
        -:  674:
  5500331:  675:  return 0;
  5500417:  676:}
        -:  677:
function getCost called 173163 returned 100% blocks executed 41%
        -:  678:int getCost(int cardNumber)
        -:  679:{
   173163:  680:  switch( cardNumber ) 
branch  0 taken 12%
branch  1 taken 11%
branch  2 taken 9%
branch  3 taken 9%
branch  4 taken 12%
branch  5 taken 10%
branch  6 taken 9%
branch  7 taken 9%
branch  8 taken 9%
branch  9 taken 10%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  681:    {
        -:  682:    case curse:
    20464:  683:      return 0;
        -:  684:    case estate:
    18200:  685:      return 2;
        -:  686:    case duchy:
    15888:  687:      return 5;
        -:  688:    case province:
    16212:  689:      return 8;
        -:  690:    case copper:
    20084:  691:      return 0;
        -:  692:    case silver:
    17253:  693:      return 3;
        -:  694:    case gold:
    16226:  695:      return 6;
        -:  696:    case adventurer:
    15680:  697:      return 6;
        -:  698:    case council_room:
    16342:  699:      return 5;
        -:  700:    case feast:
    16814:  701:      return 4;
        -:  702:    case gardens:
    #####:  703:      return 4;
        -:  704:    case mine:
    #####:  705:      return 5;
        -:  706:    case remodel:
    #####:  707:      return 4;
        -:  708:    case smithy:
    #####:  709:      return 4;
        -:  710:    case village:
    #####:  711:      return 3;
        -:  712:    case baron:
    #####:  713:      return 4;
        -:  714:    case great_hall:
    #####:  715:      return 3;
        -:  716:    case minion:
    #####:  717:      return 5;
        -:  718:    case steward:
    #####:  719:      return 3;
        -:  720:    case tribute:
    #####:  721:      return 5;
        -:  722:    case ambassador:
    #####:  723:      return 3;
        -:  724:    case cutpurse:
    #####:  725:      return 4;
        -:  726:    case embargo: 
    #####:  727:      return 2;
        -:  728:    case outpost:
    #####:  729:      return 5;
        -:  730:    case salvager:
    #####:  731:      return 4;
        -:  732:    case sea_hag:
    #####:  733:      return 4;
        -:  734:    case treasure_map:
    #####:  735:      return 4;
        -:  736:    }
        -:  737:	
    #####:  738:  return -1;
   173163:  739:}
        -:  740:
function cardEffect called 23 returned 100% blocks executed 3%
        -:  741:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  742:{
        -:  743:  int i;
        -:  744:  int j;
        -:  745:  int k;
        -:  746:  int x;
        -:  747:  int index;
       23:  748:  int currentPlayer = whoseTurn(state);
       23:  749:  int nextPlayer = currentPlayer + 1;
        -:  750:
       23:  751:  int tributeRevealedCards[2] = {-1, -1};
        -:  752:  int temphand[MAX_HAND];// moved above the if statement
       23:  753:  int drawntreasure=0;
        -:  754:  int cardDrawn;
       23:  755:  int z = 0;// this is the counter for the temp hand
       23:  756:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  757:    nextPlayer = 0;
    #####:  758:  }
        -:  759:  
        -:  760:	
        -:  761:  //uses switch to select card and perform actions
       23:  762:  switch( card ) 
branch  0 taken 26%
branch  1 taken 22%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 35%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 17%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  763:    {
        -:  764:    case adventurer:
        6:  765:      adventurerC(&drawntreasure,&state, &currentPlayer, &cardDrawn, &temphand[MAX_HAND], &z);
        6:  766:      return 0;
        -:  767:
        -:  768:    case council_room:
        5:  769:      concilRoomC(&state,&currentPlayer,&handPos);
        -:  770:			
        5:  771:      return 0;
        -:  772:
        -:  773:
        -:  774:
        -:  775:
        -:  776:
        -:  777:
        -:  778:    case feast:
        -:  779:      //gain card with cost up to 5
        -:  780:      //Backup hand
    #####:  781:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  782:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  783:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  784:      }
        -:  785:      //Backup hand
        -:  786:
        -:  787:      //Update Coins for Buy
    #####:  788:      updateCoins(currentPlayer, state, 5);
    #####:  789:      x = 1;//Condition to loop on
    #####:  790:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  791:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  792:	  if (DEBUG)
        -:  793:	    printf("None of that card left, sorry!\n");
        -:  794:
        -:  795:	  if (DEBUG){
        -:  796:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  797:	  }
    #####:  798:	}
    #####:  799:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  800:	  printf("That card is too expensive!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  804:	  }
    #####:  805:	}
        -:  806:	else{
        -:  807:
        -:  808:	  if (DEBUG){
        -:  809:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  810:	  }
        -:  811:
    #####:  812:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  813:	  x = 0;//No more buying cards
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
        -:  819:	}
        -:  820:      }     
        -:  821:
        -:  822:      //Reset Hand
    #####:  823:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  824:	state->hand[currentPlayer][i] = temphand[i];
    #####:  825:	temphand[i] = -1;
    #####:  826:      }
        -:  827:      //Reset Hand
        -:  828:      			
    #####:  829:      return 0;
        -:  830:			
        -:  831:    case gardens:
    #####:  832:      return -1;
        -:  833:			
        -:  834:    case mine:
    #####:  835:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  836:
    #####:  837:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  838:	{
    #####:  839:	  return -1;
        -:  840:	}
        -:  841:		
    #####:  842:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  843:	{
    #####:  844:	  return -1;
        -:  845:	}
        -:  846:
    #####:  847:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  848:	{
    #####:  849:	  return -1;
        -:  850:	}
        -:  851:
    #####:  852:      gainCard(choice2, state, 2, currentPlayer);
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  859:	{
    #####:  860:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  861:	    {
    #####:  862:	      discardCard(i, currentPlayer, state, 0);			
    #####:  863:	      break;
        -:  864:	    }
    #####:  865:	}
        -:  866:			
    #####:  867:      return 0;
        -:  868:			
        -:  869:    case remodel:
    #####:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
    #####:  872:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  873:	{
    #####:  874:	  return -1;
        -:  875:	}
        -:  876:
    #####:  877:      gainCard(choice2, state, 0, currentPlayer);
        -:  878:
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
        -:  881:
        -:  882:      //discard trashed card
    #####:  883:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  884:	{
    #####:  885:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  886:	    {
    #####:  887:	      discardCard(i, currentPlayer, state, 0);			
    #####:  888:	      break;
        -:  889:	    }
    #####:  890:	}
        -:  891:
        -:  892:
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case smithy:
        8:  896:      smithyC(&state, &currentPlayer, &handPos);
        8:  897:      return 0;
        -:  898:		
        -:  899:
        -:  900:
        -:  901:
        -:  902:    case village:
        -:  903:      //+1 Card
    #####:  904:      drawCard(currentPlayer, state);
        -:  905:			
        -:  906:      //+2 Actions
    #####:  907:      state->numActions = state->numActions + 2;
        -:  908:			
        -:  909:      //discard played card from hand
    #####:  910:      discardCard(handPos, currentPlayer, state, 0);
    #####:  911:      return 0;
        -:  912:		
        -:  913:    case baron:
    #####:  914:      state->numBuys++;//Increase buys by 1!
    #####:  915:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  916:	int p = 0;//Iterator for hand!
    #####:  917:	int card_not_discarded = 1;//Flag for discard set!
    #####:  918:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  919:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  920:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  921:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  922:	    state->discardCount[currentPlayer]++;
    #####:  923:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  924:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  925:	    }
    #####:  926:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  927:	    state->handCount[currentPlayer]--;
    #####:  928:	    card_not_discarded = 0;//Exit the loop
    #####:  929:	  }
    #####:  930:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  931:	    if(DEBUG) {
        -:  932:	      printf("No estate cards in your hand, invalid choice\n");
        -:  933:	      printf("Must gain an estate if there are any\n");
        -:  934:	    }
    #####:  935:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  936:	      gainCard(estate, state, 0, currentPlayer);
    #####:  937:	      state->supplyCount[estate]--;//Decrement estates
    #####:  938:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  939:		isGameOver(state);
    #####:  940:	      }
    #####:  941:	    }
    #####:  942:	    card_not_discarded = 0;//Exit the loop
    #####:  943:	  }
        -:  944:			    
        -:  945:	  else{
    #####:  946:	    p++;//Next card
        -:  947:	  }
        -:  948:	}
    #####:  949:      }
        -:  950:			    
        -:  951:      else{
    #####:  952:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  953:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  954:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  955:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  956:	    isGameOver(state);
    #####:  957:	  }
    #####:  958:	}
        -:  959:      }
        -:  960:	    
        -:  961:      
    #####:  962:      return 0;
        -:  963:		
        -:  964:    case great_hall:
        -:  965:      //+1 Card
        4:  966:      drawCard(currentPlayer, state);
        -:  967:			
        -:  968:      //+1 Actions
        4:  969:      state->numActions++;
        -:  970:			
        -:  971:      //discard card from hand
        4:  972:      discardCard(handPos, currentPlayer, state, 0);
        4:  973:      return 0;
        -:  974:		
        -:  975:    case minion:
        -:  976:      //+1 action
    #####:  977:      state->numActions++;
        -:  978:			
        -:  979:      //discard card from hand
    #####:  980:      discardCard(handPos, currentPlayer, state, 0);
        -:  981:			
    #####:  982:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  983:	{
    #####:  984:	  state->coins = state->coins + 2;
    #####:  985:	}
        -:  986:			
    #####:  987:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  988:	{
        -:  989:	  //discard hand
    #####:  990:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  991:	    {
    #####:  992:	      discardCard(handPos, currentPlayer, state, 0);
        -:  993:	    }
        -:  994:				
        -:  995:	  //draw 4
    #####:  996:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  997:	    {
    #####:  998:	      drawCard(currentPlayer, state);
    #####:  999:	    }
        -: 1000:				
        -: 1001:	  //other players discard hand and redraw if hand size > 4
    #####: 1002:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1003:	    {
    #####: 1004:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1005:		{
    #####: 1006:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1007:		    {
        -: 1008:		      //discard hand
    #####: 1009:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1010:			{
    #####: 1011:			  discardCard(handPos, i, state, 0);
        -: 1012:			}
        -: 1013:							
        -: 1014:		      //draw 4
    #####: 1015:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1016:			{
    #####: 1017:			  drawCard(i, state);
    #####: 1018:			}
    #####: 1019:		    }
    #####: 1020:		}
    #####: 1021:	    }
        -: 1022:				
    #####: 1023:	}
    #####: 1024:      return 0;
        -: 1025:		
        -: 1026:    case steward:
    #####: 1027:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
        -: 1029:	  //+2 cards
    #####: 1030:	  drawCard(currentPlayer, state);
    #####: 1031:	  drawCard(currentPlayer, state);
    #####: 1032:	}
    #####: 1033:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1034:	{
        -: 1035:	  //+2 coins
    #####: 1036:	  state->coins = state->coins + 2;
    #####: 1037:	}
        -: 1038:      else
        -: 1039:	{
        -: 1040:	  //trash 2 cards in hand
    #####: 1041:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1042:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1043:	}
        -: 1044:			
        -: 1045:      //discard card from hand
    #####: 1046:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1047:      return 0;
        -: 1048:		
        -: 1049:    case tribute:
    #####: 1050:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1051:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	  state->deckCount[nextPlayer]--;
    #####: 1054:	}
    #####: 1055:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1056:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1057:	  state->discardCount[nextPlayer]--;
    #####: 1058:	}
        -: 1059:	else{
        -: 1060:	  //No Card to Reveal
        -: 1061:	  if (DEBUG){
        -: 1062:	    printf("No cards to reveal\n");
        -: 1063:	  }
        -: 1064:	}
    #####: 1065:      }
        -: 1066:	    
        -: 1067:      else{
    #####: 1068:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1069:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1070:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:	    state->deckCount[nextPlayer]++;
    #####: 1072:	    state->discard[nextPlayer][i] = -1;
    #####: 1073:	    state->discardCount[nextPlayer]--;
    #####: 1074:	  }
        -: 1075:			    
    #####: 1076:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1077:	} 
    #####: 1078:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
    #####: 1081:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
        -: 1084:      }    
        -: 1085:		       
    #####: 1086:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1087:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:	state->playedCardCount++;
    #####: 1089:	tributeRevealedCards[1] = -1;
    #####: 1090:      }
        -: 1091:
    #####: 1092:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1093:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1094:	  state->coins += 2;
    #####: 1095:	}
        -: 1096:		    
    #####: 1097:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1098:	  drawCard(currentPlayer, state);
    #####: 1099:	  drawCard(currentPlayer, state);
    #####: 1100:	}
        -: 1101:	else{//Action Card
    #####: 1102:	  state->numActions = state->numActions + 2;
        -: 1103:	}
    #####: 1104:      }
        -: 1105:	    
    #####: 1106:      return 0;
        -: 1107:		
        -: 1108:    case ambassador:
    #####: 1109:      j = 0;		//used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
    #####: 1116:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  return -1;
        -: 1119:	}
        -: 1120:
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1124:	    {
    #####: 1125:	      j++;
    #####: 1126:	    }
    #####: 1127:	}
    #####: 1128:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  return -1;				
        -: 1131:	}
        -: 1132:
        -: 1133:      if (DEBUG) 
        -: 1134:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:      //increase supply count for choosen card by amount being discarded
    #####: 1137:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:			
        -: 1139:      //each other player gains a copy of revealed card
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1145:	    }
    #####: 1146:	}
        -: 1147:
        -: 1148:      //discard played card from hand
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1150:
        -: 1151:      //trash copies of cards returned to supply
    #####: 1152:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
    #####: 1154:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1157:		{
    #####: 1158:		  discardCard(i, currentPlayer, state, 1);
    #####: 1159:		  break;
        -: 1160:		}
    #####: 1161:	    }
    #####: 1162:	}			
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case cutpurse:
        -: 1167:
    #####: 1168:      updateCoins(currentPlayer, state, 2);
    #####: 1169:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1170:	{
    #####: 1171:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1172:	    {
    #####: 1173:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1174:		{
    #####: 1175:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1176:		    {
    #####: 1177:		      discardCard(j, i, state, 0);
    #####: 1178:		      break;
        -: 1179:		    }
    #####: 1180:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1181:		    {
    #####: 1182:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1183:			{
        -: 1184:			  if (DEBUG)
        -: 1185:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1186:			}	
    #####: 1187:		      break;
        -: 1188:		    }		
    #####: 1189:		}
        -: 1190:					
    #####: 1191:	    }
        -: 1192:				
    #####: 1193:	}				
        -: 1194:
        -: 1195:      //discard played card from hand
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1197:
    #####: 1198:      return 0;
        -: 1199:
        -: 1200:		
        -: 1201:    case embargo: 
        -: 1202:      //+2 Coins
    #####: 1203:      state->coins = state->coins + 2;
        -: 1204:			
        -: 1205:      //see if selected pile is in play
    #####: 1206:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1207:	{
    #####: 1208:	  return -1;
        -: 1209:	}
        -: 1210:			
        -: 1211:      //add embargo token to selected supply pile
    #####: 1212:      state->embargoTokens[choice1]++;
        -: 1213:			
        -: 1214:      //trash card
    #####: 1215:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1216:      return 0;
        -: 1217:		
        -: 1218:    case outpost:
    #####: 1219:      outpostC(&state, &handPos, &currentPlayer);
    #####: 1220:      return 0;
        -: 1221:
        -: 1222:
        -: 1223:
        -: 1224:    case salvager:
        -: 1225:      //+1 buy
    #####: 1226:      state->numBuys++;
        -: 1227:			
    #####: 1228:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1229:	{
        -: 1230:	  //gain coins equal to trashed card
    #####: 1231:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1232:	  //trash card
    #####: 1233:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1234:	}
        -: 1235:			
        -: 1236:      //discard card
    #####: 1237:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1238:      return 0;
        -: 1239:		
        -: 1240:    case sea_hag:
    #####: 1241:    seaHagC(&state, &currentPlayer);
    #####: 1242:      return 0;
        -: 1243:		
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:
        -: 1248:
        -: 1249:
        -: 1250:
        -: 1251:    case treasure_map:
        -: 1252:      //search hand for another treasure_map
    #####: 1253:      index = -1;
    #####: 1254:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1255:	{
    #####: 1256:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1257:	    {
    #####: 1258:	      index = i;
    #####: 1259:	      break;
        -: 1260:	    }
    #####: 1261:	}
    #####: 1262:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1263:	{
        -: 1264:	  //trash both treasure cards
    #####: 1265:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1266:	  discardCard(index, currentPlayer, state, 1);
        -: 1267:
        -: 1268:	  //gain 4 Gold cards
    #####: 1269:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1270:	    {
    #####: 1271:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1272:	    }
        -: 1273:				
        -: 1274:	  //return success
    #####: 1275:	  return 1;
        -: 1276:	}
        -: 1277:			
        -: 1278:      //no second treasure_map found in hand
    #####: 1279:      return -1;
        -: 1280:    }
        -: 1281:	
    #####: 1282:  return -1;
       23: 1283:}
        -: 1284:
function discardCard called 17 returned 100% blocks executed 80%
        -: 1285:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1286:{
        -: 1287:	
        -: 1288:  //if card is not trashed, added to Played pile 
       17: 1289:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1290:    {
        -: 1291:      //add card to played pile
       17: 1292:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       17: 1293:      state->playedCardCount++;
       17: 1294:    }
        -: 1295:	
        -: 1296:  //set played card to -1
       17: 1297:  state->hand[currentPlayer][handPos] = -1;
        -: 1298:	
        -: 1299:  //remove card from player's hand
       17: 1300:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1301:    {
        -: 1302:      //reduce number of cards in hand
    #####: 1303:      state->handCount[currentPlayer]--;
    #####: 1304:    }
       17: 1305:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1306:    {
        -: 1307:      //reduce number of cards in hand
    #####: 1308:      state->handCount[currentPlayer]--;
    #####: 1309:    }
        -: 1310:  else 	
        -: 1311:    {
        -: 1312:      //replace discarded card with last card in hand
       17: 1313:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1314:      //set last card to -1
       17: 1315:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1316:      //reduce number of cards in hand
       17: 1317:      state->handCount[currentPlayer]--;
        -: 1318:    }
        -: 1319:	
       17: 1320:  return 0;
        -: 1321:}
        -: 1322:
function gainCard called 12858 returned 100% blocks executed 72%
        -: 1323:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1324:{
        -: 1325:  //Note: supplyPos is enum of choosen card
        -: 1326:	
        -: 1327:  //check if supply pile is empty (0) or card is not used in game (-1)
    12858: 1328:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1329:    {
    #####: 1330:      return -1;
        -: 1331:    }
        -: 1332:	
        -: 1333:  //added card for [whoseTurn] current player:
        -: 1334:  // toFlag = 0 : add to discard
        -: 1335:  // toFlag = 1 : add to deck
        -: 1336:  // toFlag = 2 : add to hand
        -: 1337:
    12858: 1338:  if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1339:    {
    #####: 1340:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1341:      state->deckCount[player]++;
    #####: 1342:    }
    12858: 1343:  else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1344:    {
    #####: 1345:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1346:      state->handCount[player]++;
    #####: 1347:    }
        -: 1348:  else
        -: 1349:    {
    12858: 1350:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    12858: 1351:      state->discardCount[player]++;
        -: 1352:    }
        -: 1353:	
        -: 1354:  //decrease number in supply pile
    12858: 1355:  state->supplyCount[supplyPos]--;
        -: 1356:	 
    12858: 1357:  return 0;
    12858: 1358:}
        -: 1359:
function updateCoins called 1100049 returned 100% blocks executed 85%
        -: 1360:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1361:{
        -: 1362:  int i;
        -: 1363:	
        -: 1364:  //reset coin count
  1100049: 1365:  state->coins = 0;
        -: 1366:
        -: 1367:  //add coins for each Treasure card in player's hand
 13200588: 1368:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1369:    {
  5500245: 1370:      if (state->hand[player][i] == copper)
branch  0 taken 70%
branch  1 taken 30%
        -: 1371:	{
  3849964: 1372:	  state->coins += 1;
  3849964: 1373:	}
  1650281: 1374:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1375:	{
    #####: 1376:	  state->coins += 2;
    #####: 1377:	}
  1650281: 1378:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1379:	{
    #####: 1380:	  state->coins += 3;
    #####: 1381:	}	
  5500245: 1382:    }	
        -: 1383:
        -: 1384:  //add bonus
  1100049: 1385:  state->coins += bonus;
        -: 1386:
  1100049: 1387:  return 0;
        -: 1388:}
        -: 1389:
        -: 1390:
        -: 1391://end of dominion.c
        -: 1392:
