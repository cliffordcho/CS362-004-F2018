        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <limits.h>
        -:    9:
        -:   10:/* -----------------------------------------------------------------------
        -:   11: * Demonstration of how to write unit tests for dominion-base
        -:   12: * Include the following lines in your makefile:
        -:   13: *
        -:   14: * cardtest1: cardtest1.c dominion.o rngs.o
        -:   15: *      gcc -o cardtest1 -g  cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:   16: * -----------------------------------------------------------------------
        -:   17: */
function main called 4 returned 100% blocks executed 87%
        -:   18: int main() {
        -:   19:     int r;
        4:   20:     int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        4:   21:     int seed = 1000;
        4:   22:     int numPlayers = 2;
        -:   23:     struct gameState G, testG;
        4:   24:     int k[10] = {adventurer, great_hall, village, minion, mine, cutpurse,
        -:   25:         sea_hag, tribute, smithy, council_room};
        -:   26:
        4:   27:     int treasureCardsStart = 0;
        4:   28:     int treasureCardsEnd = 0;
        4:   29:     int discardCardsStart = 0;
        4:   30:     int discardCardsEnd = 0;
        4:   31:     int estateCardsStart = 0;
        4:   32:     int estateCardsEnd = 0;
        -:   33:
        -:   34:     //Test 1: Game starts with 7 Copper, 3 Estates. Treasure Cards in Hand should be +2 from start of game.
        4:   35:     memset(&G, 23, sizeof(struct gameState));   // clear the game state
        4:   36:     r = initializeGame(numPlayers, k, seed, &G); // initialize a new game - 2 players
        4:   37:     memcpy(&testG, &G, sizeof(struct gameState));
        4:   38:     treasureCardsStart = 0;
        4:   39:     treasureCardsEnd = 0;
        -:   40:
       88:   41:     for (int x = 0; x < 10; x++) {
branch  0 taken 91%
branch  1 taken 9%
       88:   42:         if(testG.hand[whoseTurn(&testG)][x] == copper || testG.hand[whoseTurn(&testG)][x] == silver || testG.hand[whoseTurn(&testG)][x] == gold)
branch  0 taken 60%
branch  1 taken 40%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
       16:   43:             treasureCardsStart++;
       40:   44:     }
        4:   45:     cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
       88:   46:     for (int x = 0; x < 10; x++) {
branch  0 taken 91%
branch  1 taken 9%
       72:   47:         if(testG.hand[whoseTurn(&testG)][x] == copper || testG.hand[whoseTurn(&testG)][x] == silver || testG.hand[whoseTurn(&testG)][x] == gold)
branch  0 taken 40%
branch  1 taken 60%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
       24:   48:             treasureCardsEnd++;
       40:   49:     }
        -:   50:     //printf("Treasure Cards Before: %i -- Treasure Cards After: %i\n",treasureCardsStart,treasureCardsEnd);
        4:   51:     if(treasureCardsStart + 2 == treasureCardsEnd)
branch  0 taken 100%
branch  1 taken 0%
        4:   52:         printf("Test 1: Passed\n");
        -:   53:     else
    #####:   54:         printf("Test 1: Failed\n");
        -:   55:
        -:   56:
        -:   57:     //Test 2: Game starts with 7 Copper, 3 Estates. Play 3 adventurer cards. Final Result: 7 Tresure cards in hand. Estate Card in hand + Estate card in discard = 3.
        4:   58:     memset(&G, 23, sizeof(struct gameState));   // clear the game state
        4:   59:     r = initializeGame(numPlayers, k, seed, &G); // initialize a new game - 2 players
        4:   60:     memcpy(&testG, &G, sizeof(struct gameState));
        4:   61:     treasureCardsStart = 0;
        4:   62:     treasureCardsEnd = 0;
        4:   63:     estateCardsStart = 0;
        4:   64:     estateCardsEnd = 0;
        4:   65:     discardCardsStart = 0;
        4:   66:     discardCardsEnd = 0;
       88:   67:     for (int x = 0; x < 10; x++) {
branch  0 taken 91%
branch  1 taken 9%
       40:   68:         if(testG.hand[0][x] == copper)
branch  0 taken 40%
branch  1 taken 60%
       16:   69:             treasureCardsStart++;
       40:   70:     }
        -:   71:
       88:   72:     for (int x = 0; x < 10; x++) {
branch  0 taken 91%
branch  1 taken 9%
       40:   73:         if(testG.hand[0][x] == estate)
branch  0 taken 10%
branch  1 taken 90%
        4:   74:             estateCardsStart++;
       40:   75:     }
        -:   76:
       88:   77:     for (int x = 0; x < 10; x++) {
branch  0 taken 91%
branch  1 taken 9%
       40:   78:         if(testG.discard[0][x] == estate)
branch  0 taken 0%
branch  1 taken 100%
    #####:   79:             discardCardsStart++;
       40:   80:     }
        -:   81:
        4:   82:     cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        4:   83:     cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        4:   84:     cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   85:
       88:   86:     for (int x = 0; x < 10; x++) {
branch  0 taken 91%
branch  1 taken 9%
       40:   87:         if(testG.hand[0][x] == copper)
branch  0 taken 70%
branch  1 taken 30%
       28:   88:             treasureCardsEnd++;
       40:   89:     }
       88:   90:     for (int x = 0; x < 10; x++) {
branch  0 taken 91%
branch  1 taken 9%
       40:   91:         if(testG.hand[0][x] == estate)
branch  0 taken 20%
branch  1 taken 80%
        8:   92:             estateCardsEnd++;
       40:   93:     }
        -:   94:
       88:   95:     for (int x = 0; x < 10; x++) {
branch  0 taken 91%
branch  1 taken 9%
       40:   96:         if(testG.discard[0][x] == estate)
branch  0 taken 20%
branch  1 taken 80%
        8:   97:             discardCardsEnd++;
       40:   98:     }
        -:   99:
        -:  100:     //printf("Treasure Cards Before: %i -- Treasure Cards After: %i\n",treasureCardsStart,treasureCardsEnd);
        -:  101:     //printf("Estate Cards Before: %i -- Estate Cards After: %i\n",estateCardsStart,estateCardsEnd);
        -:  102:     //printf("Discard Cards Before: %i -- Discard Cards After: %i\n",discardCardsStart,discardCardsEnd);
        4:  103:     if(treasureCardsEnd == 7)
branch  0 taken 100%
branch  1 taken 0%
        4:  104:         printf("Test 2: Passed\n");
        -:  105:     else
    #####:  106:         printf("Test 2: Failed\n");
        4:  107:     if(treasureCardsEnd + estateCardsEnd + discardCardsEnd == 10)
branch  0 taken 0%
branch  1 taken 100%
    #####:  108:         printf("Test 3: Passed\n");
        -:  109:     else
        4:  110:         printf("Test 3: Failed\n");
        -:  111:
        -:  112:     //Test 3 - 5: No state change for other players.
        4:  113:     memset(&G, 23, sizeof(struct gameState));   // clear the game state
        4:  114:     r = initializeGame(numPlayers, k, seed, &G); // initialize a new game - 2 players
        4:  115:     memcpy(&testG, &G, sizeof(struct gameState));
        -:  116:
        4:  117:     cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:  118:
        4:  119:     if(testG.handCount[whoseTurn(&testG)+1] == G.handCount[whoseTurn(&G)+1])
branch  0 taken 100%
branch  1 taken 0%
        4:  120:         printf("Test 4: Passed.\n");
        -:  121:     else
    #####:  122:         printf("Test 4: Failed.\n");
        -:  123:
        4:  124:     if(testG.deckCount[whoseTurn(&testG)+1] == G.deckCount[whoseTurn(&G)+1])
branch  0 taken 100%
branch  1 taken 0%
        4:  125:         printf("Test 5: Passed.\n");
        -:  126:     else
    #####:  127:         printf("Test 5: Failed.\n");
        -:  128:
        4:  129:     if(testG.discardCount[whoseTurn(&testG)+1] == G.discardCount[whoseTurn(&G)+1])
branch  0 taken 100%
branch  1 taken 0%
        4:  130:         printf("Test 6: Passed.\n");
        -:  131:     else
    #####:  132:         printf("Test 6: Failed.\n");
        -:  133:
        -:  134:
        -:  135:     //Test 6 - 8: No state change for victory cards and kingdom pile cards.
        4:  136:     memset(&G, 23, sizeof(struct gameState));   // clear the game state
        4:  137:     r = initializeGame(numPlayers, k, seed, &G); // initialize a new game - 2 players
        4:  138:     memcpy(&testG, &G, sizeof(struct gameState));
        -:  139:
        4:  140:     cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:  141:
        4:  142:     if(testG.supplyCount[copper] == G.supplyCount[copper])
branch  0 taken 100%
branch  1 taken 0%
        4:  143:         printf("Test 7: Passed.\n");
        -:  144:     else
    #####:  145:         printf("Test 7: Failed.\n");
        -:  146:
        4:  147:     if(testG.supplyCount[silver] == G.supplyCount[silver])
branch  0 taken 100%
branch  1 taken 0%
        4:  148:         printf("Test 8: Passed.\n");
        -:  149:     else
    #####:  150:         printf("Test 8: Failed.\n");
        -:  151:
        4:  152:     if(testG.supplyCount[silver] == G.supplyCount[silver])
branch  0 taken 100%
branch  1 taken 0%
        4:  153:         printf("Test 9: Passed.\n");
        -:  154:     else
    #####:  155:         printf("Test 9: Failed.\n");
        -:  156:
       88:  157:     for(int i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9%
       40:  158:         if(testG.supplyCount[k[i]] != G.supplyCount[k[i]]) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  159:             printf("Test 10: Failed.\n");
    #####:  160:             break;
        -:  161:         }
        -:  162:
       40:  163:         if (i == 9)
branch  0 taken 10%
branch  1 taken 90%
        4:  164:             printf("Test 10: Passed.\n");
        -:  165:
       40:  166:     }
        4:  167:     return 0;
        -:  168: }
