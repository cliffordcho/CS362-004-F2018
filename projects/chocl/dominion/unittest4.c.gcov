        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <limits.h>
        -:    9:
        -:   10:/* -----------------------------------------------------------------------
        -:   11: * Demonstration of how to write unit tests for dominion-base
        -:   12: * Include the following lines in your makefile:
        -:   13: *
        -:   14: * unittest4: unittest4.c dominion.o rngs.o
        -:   15: *      gcc -o unittest4 -g  unittest4.c dominion.o rngs.o $(CFLAGS)
        -:   16: * -----------------------------------------------------------------------
        -:   17: */
        -:   18:
function main called 3 returned 100% blocks executed 70%
        -:   19: int main() {
        3:   20:     int seed = 1000;
        -:   21:     int r;
        3:   22:     int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   23:         , remodel, smithy, village, baron, great_hall};
        -:   24:     struct gameState G;
        -:   25:
        -:   26:     //Test 1: Province = 8
        3:   27:     memset(&G, 23, sizeof(struct gameState));   // clear the game state
        3:   28:     r = initializeGame(2, k, seed, &G); // initialize a new game - 2 players
        3:   29:     if(isGameOver(&G) == 0) //Game not over; Province = 8
branch  0 taken 100%
branch  1 taken 0%
        3:   30:         printf("Test 1: Passed\n");
        -:   31:     else
    #####:   32:         printf("Test 1: Failed\n");
        -:   33:     //Test 2: Province = 0
        3:   34:     memset(&G, 23, sizeof(struct gameState));   // clear the game state
        3:   35:     r = initializeGame(2, k, seed, &G); // initialize a new game - 2 players
        3:   36:     G.supplyCount[province] = 0;
        3:   37:     if(isGameOver(&G) == 1)
branch  0 taken 100%
branch  1 taken 0%
        3:   38:         printf("Test 2: Passed\n");
        -:   39:     else
    #####:   40:         printf("Test 2: Failed\n");
        -:   41:     //Test 3-5: Number of Supply Piles w/ 0 Cards = 1,2,3
        3:   42:     memset(&G, 23, sizeof(struct gameState));   // clear the game state
        3:   43:     r = initializeGame(2, k, seed, &G); // initialize a new game - 2 players
        -:   44:
        3:   45:     G.supplyCount[adventurer] = 0;
        3:   46:     if(isGameOver(&G) == 0) //Game not over
branch  0 taken 100%
branch  1 taken 0%
        3:   47:         printf("Test 3: Passed\n");
        -:   48:     else
    #####:   49:         printf("Test 3: Failed\n");
        3:   50:     G.supplyCount[council_room] = 0;
        3:   51:     if(isGameOver(&G) == 0) //Game not over
branch  0 taken 100%
branch  1 taken 0%
        3:   52:         printf("Test 4: Passed\n");
        -:   53:     else
    #####:   54:         printf("Test 4: Failed\n");
        -:   55:
        3:   56:     G.supplyCount[feast] = 0;
        3:   57:     if(isGameOver(&G) == 1) //Game over
branch  0 taken 100%
branch  1 taken 0%
        3:   58:         printf("Test 5: Passed\n");
        -:   59:     else
    #####:   60:         printf("Test 5: Failed\n");
        -:   61:
        3:   62:     printf("End of Unit Test: isGameOver(); 5 Tests\n");
        3:   63:     return 0;
        -:   64: }
