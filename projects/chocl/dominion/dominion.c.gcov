        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:25
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3433 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
     3433:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
     3433:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
     1225:   12:    return -1;
     2208:   13:  return 0;
     3433:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 109 returned 100% blocks executed 95%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
      109:   44:  SelectStream(1);
      109:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
      218:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      109:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     2398:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
    23980:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
    20710:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    10900:   65:        }
     1090:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      109:   73:  if (numPlayers == 2)
branch  0 taken 83%
branch  1 taken 17%
        -:   74:    {
       91:   75:      state->supplyCount[curse] = 10;
       91:   76:    }
       18:   77:  else if (numPlayers == 3)
branch  0 taken 50%
branch  1 taken 50%
        -:   78:    {
        9:   79:      state->supplyCount[curse] = 20;
        9:   80:    }
        -:   81:  else
        -:   82:    {
        9:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      109:   87:  if (numPlayers == 2)
branch  0 taken 83%
branch  1 taken 17%
        -:   88:    {
       91:   89:      state->supplyCount[estate] = 8;
       91:   90:      state->supplyCount[duchy] = 8;
       91:   91:      state->supplyCount[province] = 8;
       91:   92:    }
        -:   93:  else
        -:   94:    {
       18:   95:      state->supplyCount[estate] = 12;
       18:   96:      state->supplyCount[duchy] = 12;
       18:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      109:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      109:  102:  state->supplyCount[silver] = 40;
      109:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     4578:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
    35970:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
    16895:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     2071:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 6%
branch  3 taken 94%
        -:  114:		{
      171:  115:		  if (numPlayers == 2){
branch  0 taken 82%
branch  1 taken 18%
      141:  116:		    state->supplyCount[i] = 8;
      141:  117:		  }
       30:  118:		  else{ state->supplyCount[i] = 12; }
      171:  119:		}
        -:  120:	      else
        -:  121:		{
      919:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1090:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    15805:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    15805:  130:	}
        -:  131:
     2180:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      708:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31%
        -:  139:    {
      245:  140:      state->deckCount[i] = 0;
     1960:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
      735:  143:	  state->deck[i][j] = estate;
      735:  144:	  state->deckCount[i]++;
      735:  145:	}
     3920:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
     1715:  148:	  state->deck[i][j] = copper;
     1715:  149:	  state->deckCount[i]++;
     1715:  150:	}
      245:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      708:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31%
        -:  155:    {
      245:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
      245:  160:    }
        -:  161:
        -:  162:  //draw player hands
      708:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31%
        -:  164:    {
        -:  165:      //initialize hand size to zero
      245:  166:      state->handCount[i] = 0;
      245:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
      245:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
     6104:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
     2943:  178:      state->embargoTokens[i] = 0;
     2943:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      109:  182:  state->outpostPlayed = 0;
      109:  183:  state->phase = 0;
      109:  184:  state->numActions = 1;
      109:  185:  state->numBuys = 1;
      109:  186:  state->playedCardCount = 0;
      109:  187:  state->whoseTurn = 0;
      109:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1308:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
      545:  193:    drawCard(state->whoseTurn, state);
      545:  194:  }
        -:  195:
      109:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      109:  198:  return 0;
      109:  199:}
        -:  200:
function shuffle called 269 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      269:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      269:  209:  if (state->deckCount[player] < 1)
branch  0 taken 8%
branch  1 taken 92%
       21:  210:    return -1;
      248:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     5408:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
     2456:  215:    card = floor(Random() * state->deckCount[player]);
     2456:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2456:  217:    newDeckPos++;
    17150:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
     6119:  219:      state->deck[player][i] = state->deck[player][i+1];
     6119:  220:    }
     2456:  221:    state->deckCount[player]--;
        -:  222:  }
     5408:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
     2456:  224:    state->deck[player][i] = newDeck[i];
     2456:  225:    state->deckCount[player]++;
     2456:  226:  }
        -:  227:
      248:  228:  return 0;
      269:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 35 returned 100% blocks executed 100%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       35:  280:  who = state->whoseTurn;
        -:  281:
       35:  282:  if (state->numBuys < 1){
branch  0 taken 14%
branch  1 taken 86%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        5:  285:    return -1;
       30:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 17%
branch  1 taken 83%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        5:  289:    return -1;
       25:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 20%
branch  1 taken 80%
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        5:  293:    return -1;
        -:  294:  } else {
       20:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       20:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
       20:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       20:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
       20:  308:  return 0;
       35:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 77 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
       77:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 404 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
      404:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 36 returned 100% blocks executed 100%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       36:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
      432:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17%
      180:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      180:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      180:  359:  }
       36:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
       36:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 75%
branch  1 taken 25%
       27:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       27:  365:  }
        -:  366:  else{
        9:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       36:  370:  state->outpostPlayed = 0;
       36:  371:  state->phase = 0;
       36:  372:  state->numActions = 1;
       36:  373:  state->coins = 0;
       36:  374:  state->numBuys = 1;
       36:  375:  state->playedCardCount = 0;
       36:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      432:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
      180:  381:    drawCard(state->whoseTurn, state);//Draw a card
      180:  382:  }
        -:  383:
        -:  384:  //Update money
       36:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       36:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 15 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
       15:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 20%
branch  1 taken 80%
        -:  396:    {
        3:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       12:  401:  j = 0;
      624:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
      300:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6%
branch  1 taken 94%
        -:  405:	{
       18:  406:	  j++;
       18:  407:	}
      300:  408:    }
       12:  409:  if ( j >= 3)
branch  0 taken 25%
branch  1 taken 75%
        -:  410:    {
        3:  411:      return 1;
        -:  412:    }
        -:  413:
        9:  414:  return 0;
       15:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 913 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      913:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       36:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 33%
branch  1 taken 67%
        6:  534:      state->deck[player][i] = state->discard[player][i];
        6:  535:      state->discard[player][i] = -1;
        6:  536:    }
        -:  537:
       12:  538:    state->deckCount[player] = state->discardCount[player];
       12:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       12:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       12:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       12:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       12:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       12:  559:    if (deckCounter == 0)
branch  0 taken 75%
branch  1 taken 25%
        9:  560:      return -1;
        -:  561:
        3:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  563:    state->deckCount[player]--;
        3:  564:    state->handCount[player]++;//Increment hand count
        3:  565:  }
        -:  566:
        -:  567:  else{
      901:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      901:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      901:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      901:  576:    state->deckCount[player]--;
      901:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      904:  580:  return 0;
      913:  581:}
        -:  582:
function getCost called 45 returned 100% blocks executed 12%
        -:  583:int getCost(int cardNumber)
        -:  584:{
       45:  585:  switch( cardNumber )
branch  0 taken 0%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
       45:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
       45:  644:}
        -:  645:
function cardEffect called 53 returned 100% blocks executed 3%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       53:  653:  int currentPlayer = whoseTurn(state);
       53:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       53:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       53:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       53:  660:  int z = 0;// this is the counter for the temp hand
       53:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
       53:  667:  switch( card )
branch  0 taken 34%
branch  1 taken 28%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 23%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 15%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
       18:  670:      return playAdventurer(state);
        -:  671:
        -:  672:    case council_room:
       15:  673:      return playCouncil_Room(state, handPos);
        -:  674:    case feast:
        -:  675:      //gain card with cost up to 5
        -:  676:      //Backup hand
    #####:  677:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  678:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  679:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  680:      }
        -:  681:      //Backup hand
        -:  682:
        -:  683:      //Update Coins for Buy
    #####:  684:      updateCoins(currentPlayer, state, 5);
    #####:  685:      x = 1;//Condition to loop on
    #####:  686:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  687:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  688:	  if (DEBUG)
        -:  689:	    printf("None of that card left, sorry!\n");
        -:  690:
        -:  691:	  if (DEBUG){
        -:  692:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  693:	  }
    #####:  694:	}
    #####:  695:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  696:	  printf("That card is too expensive!\n");
        -:  697:
        -:  698:	  if (DEBUG){
        -:  699:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  700:	  }
    #####:  701:	}
        -:  702:	else{
        -:  703:
        -:  704:	  if (DEBUG){
        -:  705:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  706:	  }
        -:  707:
    #####:  708:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  709:	  x = 0;//No more buying cards
        -:  710:
        -:  711:	  if (DEBUG){
        -:  712:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  713:	  }
        -:  714:
        -:  715:	}
        -:  716:      }
        -:  717:
        -:  718:      //Reset Hand
    #####:  719:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  720:	state->hand[currentPlayer][i] = temphand[i];
    #####:  721:	temphand[i] = -1;
    #####:  722:      }
        -:  723:      //Reset Hand
        -:  724:
    #####:  725:      return 0;
        -:  726:
        -:  727:    case gardens:
    #####:  728:      return -1;
        -:  729:
        -:  730:    case mine:
    #####:  731:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  732:
    #####:  733:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  734:	{
    #####:  735:	  return -1;
        -:  736:	}
        -:  737:
    #####:  738:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  739:	{
    #####:  740:	  return -1;
        -:  741:	}
        -:  742:
    #####:  743:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  744:	{
    #####:  745:	  return -1;
        -:  746:	}
        -:  747:
    #####:  748:      gainCard(choice2, state, 2, currentPlayer);
        -:  749:
        -:  750:      //discard card from hand
    #####:  751:      discardCard(handPos, currentPlayer, state, 0);
        -:  752:
        -:  753:      //discard trashed card
    #####:  754:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  755:	{
    #####:  756:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  757:	    {
    #####:  758:	      discardCard(i, currentPlayer, state, 0);
    #####:  759:	      break;
        -:  760:	    }
    #####:  761:	}
        -:  762:
    #####:  763:      return 0;
        -:  764:
        -:  765:    case remodel:
    #####:  766:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  767:
    #####:  768:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  769:	{
    #####:  770:	  return -1;
        -:  771:	}
        -:  772:
    #####:  773:      gainCard(choice2, state, 0, currentPlayer);
        -:  774:
        -:  775:      //discard card from hand
    #####:  776:      discardCard(handPos, currentPlayer, state, 0);
        -:  777:
        -:  778:      //discard trashed card
    #####:  779:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	{
    #####:  781:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  782:	    {
    #####:  783:	      discardCard(i, currentPlayer, state, 0);
    #####:  784:	      break;
        -:  785:	    }
    #####:  786:	}
    #####:  787:      return 0;
        -:  788:
        -:  789:    case smithy:
       12:  790:      return playSmithy(state, handPos);
        -:  791:
        -:  792:    case village:
    #####:  793:      return playVillage(state, handPos);
        -:  794:
        -:  795:    case baron:
    #####:  796:      state->numBuys++;//Increase buys by 1!
    #####:  797:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  798:	int p = 0;//Iterator for hand!
    #####:  799:	int card_not_discarded = 1;//Flag for discard set!
    #####:  800:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  801:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  802:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  803:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  804:	    state->discardCount[currentPlayer]++;
    #####:  805:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  806:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  807:	    }
    #####:  808:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  809:	    state->handCount[currentPlayer]--;
    #####:  810:	    card_not_discarded = 0;//Exit the loop
    #####:  811:	  }
    #####:  812:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  813:	    if(DEBUG) {
        -:  814:	      printf("No estate cards in your hand, invalid choice\n");
        -:  815:	      printf("Must gain an estate if there are any\n");
        -:  816:	    }
    #####:  817:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  818:	      gainCard(estate, state, 0, currentPlayer);
    #####:  819:	      state->supplyCount[estate]--;//Decrement estates
    #####:  820:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  821:		isGameOver(state);
    #####:  822:	      }
    #####:  823:	    }
    #####:  824:	    card_not_discarded = 0;//Exit the loop
    #####:  825:	  }
        -:  826:
        -:  827:	  else{
    #####:  828:	    p++;//Next card
        -:  829:	  }
        -:  830:	}
    #####:  831:      }
        -:  832:
        -:  833:      else{
    #####:  834:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  835:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  836:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  837:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  838:	    isGameOver(state);
    #####:  839:	  }
    #####:  840:	}
        -:  841:      }
        -:  842:
        -:  843:
    #####:  844:      return 0;
        -:  845:
        -:  846:    case great_hall:
        8:  847:      return playGreat_Hall(state,handPos);
        -:  848:
        -:  849:    case minion:
        -:  850:      //+1 action
    #####:  851:      state->numActions++;
        -:  852:
        -:  853:      //discard card from hand
    #####:  854:      discardCard(handPos, currentPlayer, state, 0);
        -:  855:
    #####:  856:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  857:	{
    #####:  858:	  state->coins = state->coins + 2;
    #####:  859:	}
        -:  860:
    #####:  861:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  862:	{
        -:  863:	  //discard hand
    #####:  864:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  865:	    {
    #####:  866:	      discardCard(handPos, currentPlayer, state, 0);
        -:  867:	    }
        -:  868:
        -:  869:	  //draw 4
    #####:  870:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  871:	    {
    #####:  872:	      drawCard(currentPlayer, state);
    #####:  873:	    }
        -:  874:
        -:  875:	  //other players discard hand and redraw if hand size > 4
    #####:  876:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  877:	    {
    #####:  878:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  879:		{
    #####:  880:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  881:		    {
        -:  882:		      //discard hand
    #####:  883:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  884:			{
    #####:  885:			  discardCard(handPos, i, state, 0);
        -:  886:			}
        -:  887:
        -:  888:		      //draw 4
    #####:  889:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  890:			{
    #####:  891:			  drawCard(i, state);
    #####:  892:			}
    #####:  893:		    }
    #####:  894:		}
    #####:  895:	    }
        -:  896:
    #####:  897:	}
    #####:  898:      return 0;
        -:  899:
        -:  900:    case steward:
    #####:  901:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  902:	{
        -:  903:	  //+2 cards
    #####:  904:	  drawCard(currentPlayer, state);
    #####:  905:	  drawCard(currentPlayer, state);
    #####:  906:	}
    #####:  907:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  908:	{
        -:  909:	  //+2 coins
    #####:  910:	  state->coins = state->coins + 2;
    #####:  911:	}
        -:  912:      else
        -:  913:	{
        -:  914:	  //trash 2 cards in hand
    #####:  915:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  916:	  discardCard(choice3, currentPlayer, state, 1);
        -:  917:	}
        -:  918:
        -:  919:      //discard card from hand
    #####:  920:      discardCard(handPos, currentPlayer, state, 0);
    #####:  921:      return 0;
        -:  922:
        -:  923:    case tribute:
    #####:  924:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  925:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  926:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  927:	  state->deckCount[nextPlayer]--;
    #####:  928:	}
    #####:  929:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  930:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  931:	  state->discardCount[nextPlayer]--;
    #####:  932:	}
        -:  933:	else{
        -:  934:	  //No Card to Reveal
        -:  935:	  if (DEBUG){
        -:  936:	    printf("No cards to reveal\n");
        -:  937:	  }
        -:  938:	}
    #####:  939:      }
        -:  940:
        -:  941:      else{
    #####:  942:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  943:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  944:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  945:	    state->deckCount[nextPlayer]++;
    #####:  946:	    state->discard[nextPlayer][i] = -1;
    #####:  947:	    state->discardCount[nextPlayer]--;
    #####:  948:	  }
        -:  949:
    #####:  950:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  951:	}
    #####:  952:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  953:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  954:	state->deckCount[nextPlayer]--;
    #####:  955:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  956:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  957:	state->deckCount[nextPlayer]--;
        -:  958:      }
        -:  959:
    #####:  960:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  961:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  962:	state->playedCardCount++;
    #####:  963:	tributeRevealedCards[1] = -1;
    #####:  964:      }
        -:  965:
    #####:  966:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  967:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  968:	  state->coins += 2;
    #####:  969:	}
        -:  970:
    #####:  971:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  972:	  drawCard(currentPlayer, state);
    #####:  973:	  drawCard(currentPlayer, state);
    #####:  974:	}
        -:  975:	else{//Action Card
    #####:  976:	  state->numActions = state->numActions + 2;
        -:  977:	}
    #####:  978:      }
        -:  979:
    #####:  980:      return 0;
        -:  981:
        -:  982:    case ambassador:
    #####:  983:      j = 0;		//used to check if player has enough cards to discard
        -:  984:
    #####:  985:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  986:	{
    #####:  987:	  return -1;
        -:  988:	}
        -:  989:
    #####:  990:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  return -1;
        -:  993:	}
        -:  994:
    #####:  995:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  996:	{
    #####:  997:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  998:	    {
    #####:  999:	      j++;
    #####: 1000:	    }
    #####: 1001:	}
    #####: 1002:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
    #####: 1004:	  return -1;
        -: 1005:	}
        -: 1006:
        -: 1007:      if (DEBUG)
        -: 1008:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1009:
        -: 1010:      //increase supply count for choosen card by amount being discarded
    #####: 1011:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1012:
        -: 1013:      //each other player gains a copy of revealed card
    #####: 1014:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1015:	{
    #####: 1016:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1017:	    {
    #####: 1018:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1019:	    }
    #####: 1020:	}
        -: 1021:
        -: 1022:      //discard played card from hand
    #####: 1023:      discardCard(handPos, currentPlayer, state, 0);
        -: 1024:
        -: 1025:      //trash copies of cards returned to supply
    #####: 1026:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1027:	{
    #####: 1028:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1029:	    {
    #####: 1030:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1031:		{
    #####: 1032:		  discardCard(i, currentPlayer, state, 1);
    #####: 1033:		  break;
        -: 1034:		}
    #####: 1035:	    }
    #####: 1036:	}
        -: 1037:
    #####: 1038:      return 0;
        -: 1039:
        -: 1040:    case cutpurse:
        -: 1041:
    #####: 1042:      updateCoins(currentPlayer, state, 2);
    #####: 1043:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
    #####: 1045:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1046:	    {
    #####: 1047:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1048:		{
    #####: 1049:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1050:		    {
    #####: 1051:		      discardCard(j, i, state, 0);
    #####: 1052:		      break;
        -: 1053:		    }
    #####: 1054:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1055:		    {
    #####: 1056:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1057:			{
        -: 1058:			  if (DEBUG)
        -: 1059:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1060:			}
    #####: 1061:		      break;
        -: 1062:		    }
    #####: 1063:		}
        -: 1064:
    #####: 1065:	    }
        -: 1066:
    #####: 1067:	}
        -: 1068:
        -: 1069:      //discard played card from hand
    #####: 1070:      discardCard(handPos, currentPlayer, state, 0);
        -: 1071:
    #####: 1072:      return 0;
        -: 1073:
        -: 1074:
        -: 1075:    case embargo:
        -: 1076:      //+2 Coins
    #####: 1077:      state->coins = state->coins + 2;
        -: 1078:
        -: 1079:      //see if selected pile is in play
    #####: 1080:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1081:	{
    #####: 1082:	  return -1;
        -: 1083:	}
        -: 1084:
        -: 1085:      //add embargo token to selected supply pile
    #####: 1086:      state->embargoTokens[choice1]++;
        -: 1087:
        -: 1088:      //trash card
    #####: 1089:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1090:      return 0;
        -: 1091:
        -: 1092:    case outpost:
        -: 1093:      //set outpost flag
    #####: 1094:      state->outpostPlayed++;
        -: 1095:
        -: 1096:      //discard card
    #####: 1097:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1098:      return 0;
        -: 1099:
        -: 1100:    case salvager:
        -: 1101:      //+1 buy
    #####: 1102:      state->numBuys++;
        -: 1103:
    #####: 1104:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
        -: 1106:	  //gain coins equal to trashed card
    #####: 1107:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1108:	  //trash card
    #####: 1109:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1110:	}
        -: 1111:
        -: 1112:      //discard card
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1114:      return 0;
        -: 1115:
        -: 1116:    case sea_hag:
    #####: 1117:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1118:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1119:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1120:	  state->discardCount[i]++;
    #####: 1121:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1122:	}
    #####: 1123:      }
    #####: 1124:      return 0;
        -: 1125:
        -: 1126:    case treasure_map:
        -: 1127:      //search hand for another treasure_map
    #####: 1128:      index = -1;
    #####: 1129:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	{
    #####: 1131:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1132:	    {
    #####: 1133:	      index = i;
    #####: 1134:	      break;
        -: 1135:	    }
    #####: 1136:	}
    #####: 1137:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1138:	{
        -: 1139:	  //trash both treasure cards
    #####: 1140:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1141:	  discardCard(index, currentPlayer, state, 1);
        -: 1142:
        -: 1143:	  //gain 4 Gold cards
    #####: 1144:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:	    {
    #####: 1146:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1147:	    }
        -: 1148:
        -: 1149:	  //return success
    #####: 1150:	  return 1;
        -: 1151:	}
        -: 1152:
        -: 1153:      //no second treasure_map found in hand
    #####: 1154:      return -1;
        -: 1155:    }
        -: 1156:
    #####: 1157:  return -1;
       53: 1158:}
        -: 1159:
function discardCard called 20 returned 100% blocks executed 80%
        -: 1160:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1161:{
        -: 1162:
        -: 1163:  //if card is not trashed, added to Played pile
       20: 1164:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1165:    {
        -: 1166:      //add card to played pile
       20: 1167:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       20: 1168:      state->playedCardCount++;
       20: 1169:    }
        -: 1170:
        -: 1171:  //set played card to -1
       20: 1172:  state->hand[currentPlayer][handPos] = -1;
        -: 1173:
        -: 1174:  //remove card from player's hand
       20: 1175:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1176:    {
        -: 1177:      //reduce number of cards in hand
    #####: 1178:      state->handCount[currentPlayer]--;
    #####: 1179:    }
       20: 1180:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1181:    {
        -: 1182:      //reduce number of cards in hand
    #####: 1183:      state->handCount[currentPlayer]--;
    #####: 1184:    }
        -: 1185:  else
        -: 1186:    {
        -: 1187:      //replace discarded card with last card in hand
       20: 1188:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1189:      //set last card to -1
       20: 1190:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1191:      //reduce number of cards in hand
       20: 1192:      state->handCount[currentPlayer]--;
        -: 1193:    }
        -: 1194:
       20: 1195:  return 0;
        -: 1196:}
        -: 1197:
function gainCard called 20 returned 100% blocks executed 72%
        -: 1198:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1199:{
        -: 1200:  //Note: supplyPos is enum of choosen card
        -: 1201:
        -: 1202:  //check if supply pile is empty (0) or card is not used in game (-1)
       20: 1203:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1204:    {
    #####: 1205:      return -1;
        -: 1206:    }
        -: 1207:
        -: 1208:  //added card for [whoseTurn] current player:
        -: 1209:  // toFlag = 0 : add to discard
        -: 1210:  // toFlag = 1 : add to deck
        -: 1211:  // toFlag = 2 : add to hand
        -: 1212:
       20: 1213:  if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1214:    {
    #####: 1215:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1216:      state->deckCount[player]++;
    #####: 1217:    }
       20: 1218:  else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1219:    {
    #####: 1220:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1221:      state->handCount[player]++;
    #####: 1222:    }
        -: 1223:  else
        -: 1224:    {
       20: 1225:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       20: 1226:      state->discardCount[player]++;
        -: 1227:    }
        -: 1228:
        -: 1229:  //decrease number in supply pile
       20: 1230:  state->supplyCount[supplyPos]--;
        -: 1231:
       20: 1232:  return 0;
       20: 1233:}
        -: 1234:
function updateCoins called 145 returned 100% blocks executed 85%
        -: 1235:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1236:{
        -: 1237:  int i;
        -: 1238:
        -: 1239:  //reset coin count
      145: 1240:  state->coins = 0;
        -: 1241:
        -: 1242:  //add coins for each Treasure card in player's hand
     1740: 1243:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1244:    {
      725: 1245:      if (state->hand[player][i] == copper)
branch  0 taken 77%
branch  1 taken 23%
        -: 1246:	{
      559: 1247:	  state->coins += 1;
      559: 1248:	}
      166: 1249:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1250:	{
    #####: 1251:	  state->coins += 2;
    #####: 1252:	}
      166: 1253:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1254:	{
    #####: 1255:	  state->coins += 3;
    #####: 1256:	}
      725: 1257:    }
        -: 1258:
        -: 1259:  //add bonus
      145: 1260:  state->coins += bonus;
        -: 1261:
      145: 1262:  return 0;
        -: 1263:}
        -: 1264:
function playAdventurer called 18 returned 100% blocks executed 100%
        -: 1265:int playAdventurer(struct gameState *state) {
        -: 1266:
        -: 1267://int z = 0; //This is the correct one
        -: 1268:int z; //this is the incorrect one
       18: 1269:int drawntreasure = 0;
        -: 1270:int cardDrawn;
        -: 1271:int temphand[MAX_HAND];
       18: 1272:int currentPlayer = whoseTurn(state);
        -: 1273:
      132: 1274:while(drawntreasure < 2) {
branch  0 taken 73%
branch  1 taken 27%
       48: 1275:  if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 25%
branch  1 taken 75%
       12: 1276:    shuffle(currentPlayer, state);
       12: 1277:  }
        -: 1278:
       48: 1279:drawCard(currentPlayer, state);
        -: 1280:
       48: 1281:cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1282:
       72: 1283:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 25%
branch  1 taken 75%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
       36: 1284:    drawntreasure++;
        -: 1285:    else  {
       12: 1286:      temphand[z]=cardDrawn;
       12: 1287:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       12: 1288:      z++;
        -: 1289:    }
        -: 1290:}
        -: 1291:
       60: 1292:while(z - 1 >= 0) {
branch  0 taken 40%
branch  1 taken 60%
       12: 1293:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       12: 1294:  z=z-1;
        -: 1295:}
        -: 1296:
       18: 1297:return 0;
        -: 1298:}
        -: 1299:
function playCouncil_Room called 15 returned 100% blocks executed 100%
        -: 1300:int playCouncil_Room(struct gameState *state, int handPos) {
        -: 1301:  int i;
       15: 1302:  int currentPlayer = whoseTurn(state);
        -: 1303:  //+4 Cards
      150: 1304:  for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20%
       60: 1305:    drawCard(currentPlayer, state);
       60: 1306:  }
        -: 1307:
        -: 1308:  //+1 Buy
       15: 1309:  state->numBuys++;
        -: 1310:
        -: 1311:  //Each other player draws a card
      108: 1312:  for (i = 0; i < state->numPlayers; i++) {
branch  0 taken 72%
branch  1 taken 28%
       39: 1313:    if ( i != currentPlayer ) {
branch  0 taken 62%
branch  1 taken 38%
       24: 1314:      drawCard(i, state);
       24: 1315:    }
       39: 1316:  }
        -: 1317:
        -: 1318:  //put played card in played card pile
        -: 1319:  //discardCard(handPos, currentPlayer, state, 0); //incorrect, need to discard
        -: 1320:
       15: 1321:  return 0;
        -: 1322:}
        -: 1323:
function playSmithy called 12 returned 100% blocks executed 100%
        -: 1324:int playSmithy(struct gameState *state, int handPos) {
        -: 1325:  int i;
       12: 1326:  int currentPlayer = whoseTurn(state);
        -: 1327:  //+3 Cards
      120: 1328:  for (i = 0; i <= 3; i++) //incorrect: change <= to <
branch  0 taken 80%
branch  1 taken 20%
        -: 1329:  {
       48: 1330:    drawCard(currentPlayer, state);
       48: 1331:  }
        -: 1332:
        -: 1333:  //discard card from hand
       12: 1334:  discardCard(handPos, currentPlayer, state, 0);
       12: 1335:  return 0;
        -: 1336:}
        -: 1337:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1338:int playVillage(struct gameState *state, int handPos) {
    #####: 1339:  int currentPlayer = whoseTurn(state);
        -: 1340:  //+1 Card
    #####: 1341:  drawCard(currentPlayer, state);
        -: 1342:
        -: 1343:  //+2 Actions
    #####: 1344:  state->numActions = state->numActions + 2;
        -: 1345:
        -: 1346:  //discard played card from hand
    #####: 1347:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1348:  return 0;
        -: 1349:}
        -: 1350:
function playGreat_Hall called 8 returned 100% blocks executed 100%
        -: 1351:int playGreat_Hall(struct gameState *state, int handPos) {
        8: 1352:  int currentPlayer = whoseTurn(state);
        -: 1353:  //+1 Card
        8: 1354:  drawCard(currentPlayer, state); //correct
        -: 1355:  //drawCard(state,currentPlayer); //incorrect
        -: 1356:
        -: 1357:  //+1 Actions
        8: 1358:  state->numActions++;
        -: 1359:
        -: 1360:  //discard card from hand
        8: 1361:  discardCard(handPos, currentPlayer, state, 0);
        8: 1362:  return 0;
        -: 1363:}
        -: 1364://end of dominion.c
